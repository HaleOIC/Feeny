Mode: Bytecode
Input file: ../output/bytecode_compiler/morehanoi.ast
Loading ast from file...
Compiling Program:
defn stack (n, id) : (object : (var capacity = n var stackArray = array(n, 0) var size = 0 var index = id method push (v) : (if this.size.lt(this.capacity) : (this.stackArray.set(this.size, v) this.size = this.size.add(1)) else : (printf("Error: stack size is larger than capacity"))) method pop () : (if this.size.gt(0) : (this.size = this.size.sub(1) this.stackArray.get(this.size)) else : (printf("Error: stack is empty"))) method peek () : (if this.size.gt(0) : (this.stackArray.get(this.size.sub(1))) else : (printf("Error: stack is empty"))))) defn selection (n) : (if n.eq(1) : (printf("A")) else : (if n.eq(2) : (printf("B")) else : (printf("C")))) defn print (plateId, fromId, toId) : (printf("Move plate ~ from ", plateId) selection(fromId) printf(" Stack to ") selection(toId) printf(" Stack\n")) defn move (n, from, to, aux) : (if n.gt(0) : (move(n.sub(1), from, aux, to) var currentPlate = from.pop() to.push(currentPlate) print(currentPlate, from.index, to.index) move(n.sub(1), aux, to, from)) else : (null)) defn main () : (var stackA = stack(6, 1) var stackB = stack(6, 2) var stackC = stack(6, 3) var i = 0 while i.lt(6) : (stackA.push(6.sub(i)) i = i.add(1)) move(6, stackA, stackB, stackC)) main()
