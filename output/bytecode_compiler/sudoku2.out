Mode: Bytecode
Input file: ../output/bytecode_compiler/sudoku2.ast
Loading ast from file...
Compiling Program:
defn and (a, b) : (if a : (b) else : (a)) defn or (a, b) : (if a : (a) else : (b)) defn not (x) : (if x : (null) else : (0)) var check-array = array(10, 0) defn begin-check () : (var i = 0 while i.lt(10) : (check-array.set(i, 0) i = i.add(1))) defn check (x) : (check-array.set(x, check-array.get(x).add(1))) defn check-good? () : (var good = 1 var i = 1 while i.lt(10) : (good = and(good, check-array.get(i).le(1)) i = i.add(1)) good) defn solvehelper (b, i) : (if i.eq(81) : (0) else : (if b.pos(i).eq(0) : (var s = null var n = 1 while n.le(9) : (if not(s) : (b.set-pos(i, n) if b.good?() : (s = or(s, solvehelper(b, i.add(1)))) else : (null)) else : (null) n = n.add(1)) if s : (s) else : (b.set-pos(i, 0) null)) else : (solvehelper(b, i.add(1))))) defn board () : (object : (var array = array(9.mul(9), 0) method pos (i) : (this.array.get(i)) method set-pos (i, x) : (this.array.set(i, x)) method get (r, c) : (this.array.get(r.mul(9).add(c))) method set (r, c, x) : (this.array.set(r.mul(9).add(c), x)) method print () : (var r = 0 while r.lt(9) : (var c = 0 while c.lt(9) : (if c.gt(0) : (printf(" ")) else : (null) if this.get(r, c).eq(0) : (printf("_")) else : (printf("~", this.get(r, c))) c = c.add(1)) printf("\n") r = r.add(1))) method good? () : (var good? = 1 var r = 0 while r.lt(9) : (begin-check() var c = 0 while c.lt(9) : (check(this.get(r, c)) c = c.add(1)) good? = and(good?, check-good?()) r = r.add(1)) var c = 0 while c.lt(9) : (begin-check() var r = 0 while r.lt(9) : (check(this.get(r, c)) r = r.add(1)) good? = and(good?, check-good?()) c = c.add(1)) var cell = 0 while cell.lt(9) : (var r = cell.div(3).mul(3) var c = cell.mod(3).mul(3) begin-check() var ri = r while ri.lt(r.add(3)) : (var ci = c while ci.lt(c.add(3)) : (check(this.get(ri, ci)) ci = ci.add(1)) ri = ri.add(1)) good? = and(good?, check-good?()) cell = cell.add(1)) good?) method solve () : (solvehelper(this, 0)))) defn main () : (var b = board() b.set(0, 0, 8) b.set(0, 1, 0) b.set(0, 2, 0) b.set(0, 3, 1) b.set(0, 4, 0) b.set(0, 5, 3) b.set(0, 6, 4) b.set(0, 7, 0) b.set(0, 8, 0) b.set(1, 0, 0) b.set(1, 1, 3) b.set(1, 2, 5) b.set(1, 3, 7) b.set(1, 4, 8) b.set(1, 5, 0) b.set(1, 6, 0) b.set(1, 7, 6) b.set(1, 8, 2) b.set(2, 0, 4) b.set(2, 1, 7) b.set(2, 2, 0) b.set(2, 3, 0) b.set(2, 4, 0) b.set(2, 5, 6) b.set(2, 6, 0) b.set(2, 7, 9) b.set(2, 8, 0) b.set(3, 0, 0) b.set(3, 1, 0) b.set(3, 2, 0) b.set(3, 3, 0) b.set(3, 4, 0) b.set(3, 5, 0) b.set(3, 6, 0) b.set(3, 7, 2) b.set(3, 8, 4) b.set(4, 0, 0) b.set(4, 1, 1) b.set(4, 2, 0) b.set(4, 3, 3) b.set(4, 4, 0) b.set(4, 5, 5) b.set(4, 6, 0) b.set(4, 7, 8) b.set(4, 8, 0) b.set(5, 0, 2) b.set(5, 1, 8) b.set(5, 2, 0) b.set(5, 3, 0) b.set(5, 4, 0) b.set(5, 5, 0) b.set(5, 6, 0) b.set(5, 7, 0) b.set(5, 8, 0) b.set(6, 0, 0) b.set(6, 1, 2) b.set(6, 2, 0) b.set(6, 3, 6) b.set(6, 4, 0) b.set(6, 5, 0) b.set(6, 6, 0) b.set(6, 7, 3) b.set(6, 8, 9) b.set(7, 0, 1) b.set(7, 1, 9) b.set(7, 2, 0) b.set(7, 3, 0) b.set(7, 4, 7) b.set(7, 5, 2) b.set(7, 6, 6) b.set(7, 7, 4) b.set(7, 8, 0) b.set(8, 0, 0) b.set(8, 1, 0) b.set(8, 2, 8) b.set(8, 3, 5) b.set(8, 4, 0) b.set(8, 5, 9) b.set(8, 6, 0) b.set(8, 7, 0) b.set(8, 8, 1) b.solve()) var i = 0 while i.lt(40) : (printf("Puzzle ~\n", i) main() i = i.add(1))
